[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "",
    "section": "",
    "text": "A personal project of solutions to Advent of Code. I love these challenges as they give me a refreshing and stimulating way to get more comfortable coding, thinking about algorithms as well as just being being a fun set of puzzles.\nAs some kind of data analyst I am usually transforming and visualising data in Excel and R. I’m taking this as an opportunity to try out different kinds of operations and to pick up Python. I’d say it’s stepping out of my comfort zone, but perhaps by nature of my apparent obsession, I’m stepping into it."
  },
  {
    "objectID": "2024/nav.html",
    "href": "2024/nav.html",
    "title": "",
    "section": "",
    "text": "Day 1 Day 2"
  },
  {
    "objectID": "2024/1.html",
    "href": "2024/1.html",
    "title": "2024",
    "section": "",
    "text": "Day 1 Day 2\n\n\n\nR\nPython\n\n\n\n— R Day 1 Part 1 —\n#' Compare the differences between 2 lists\n#'\n#' A friendly opener! We parse the input text as 2 lists of numbers and sort\n#' them. Then we take the sum of the absolute differences between pairs.\n#'\n#' @param input\n#' A character vector with 2 numbers per string\n#'\n#' @return\n#' The sum of absolute differences between the sorted lists\nsolve_day1_part1 &lt;- function(input) {\n  # extract to 2 vectors for ease of operations\n  lists &lt;- strsplit(input, \" +\")\n  first_list &lt;- lapply(lists, \\(x) x[[1]])\n  second_list &lt;- lapply(lists, \\(x) x[[2]])\n\n  # sort so that we pair up the smallest number in the left list with the\n  # smallest number in the right list etc.\n  first_list &lt;- sort(as.numeric(first_list))\n  second_list &lt;- sort(as.numeric(second_list))\n\n  # we want the absolute distance\n  # it doesn't matter which list has the larger number\n  distances &lt;- abs(second_list - first_list)\n\n  sum(distances)\n}\n\nRunaoc_source(day = 1, part = 1)\n\ninput = aoc_read(day = 1)\n\naoc_run(solve_day1_part1(input))\n\nElapsed: 0.008 seconds\nMemory:  71 KB\n\n\n— R Day 1 Part 2 —\n#' Score the similarities between 2 lists\n#'\n#' Parse the input text as 2 lists of numbers. Count the number of occurrences\n#' of each item in the first list in the second list. Multiply each number by\n#' its count to get the similarity score. Finally sum the score.\n#'\n#' To count I used the sum of equality between each number in the second\n#' list and the number being counted from the first list.\n#'\n#' @param input\n#' A character vector with 2 numbers per string\n#'\n#' @return\n#' The sum of absolute differences between the sorted lists\nsolve_day1_part2 &lt;- function(input) {\n  # extract to 2 vectors for ease of operations\n  lists &lt;- strsplit(input, \" +\")\n  first_list &lt;- lapply(lists, \\(x) x[[1]])\n  second_list &lt;- lapply(lists, \\(x) x[[2]])\n\n  first_list &lt;- as.numeric(first_list)\n  second_list &lt;- as.numeric(second_list)\n\n  # This time we need to count how many times a number in the first list\n  # occurs in the second list. We can do that as the sum of logical equality\n  # between each number in the second list and the number being counted from\n  # the first list.\n  counts &lt;- vapply(first_list, \\(num) sum(second_list == num), numeric(1))\n\n  similarity_scores &lt;- first_list * counts\n\n  sum(similarity_scores)\n}\n\nRunaoc_source(day = 1, part = 2)\n\ninput = aoc_read(day = 1)\n\naoc_run(solve_day1_part2(input))\n\nElapsed: 0.008 seconds\nMemory:  4067 KB\n\n\n\n\n\n— Python Day 1 Part 1 —\ndef solve_day1_part1(input):\n  \"\"\"\n  Compare the differences between 2 lists\n  \n  Parse the input text as 2 lists of numbers and sort \n  them. Then take the sum of the absolute differences between pairs.\n  \n  I imagine it's not too 'pythonic' even for such a simple puzzle. In porting\n  my R solution with the limited Python that I know, lapply has become list \n  comprehensions and I've used a for loop to iterate over the 2 lists instead\n  of a vectorised comparison. Perhaps NumPy could help out there?\n\n  Parameters\n  ----------\n  input : list of str\n      Where each string contains a number in the first list and a the second \n      list.\n\n  Returns\n  -------\n  int\n      The sum of absolute differences between the sorted lists\n  \"\"\"\n  # extract to 2 lists of integers for ease of operations\n  lines = [line.split() for line in input]\n  first_list = [int(line[0]) for line in lines]\n  second_list = [int(line[1]) for line in lines]\n  \n  # sort so that we pair up the smallest number in the left list with the\n  # smallest number in the right list etc.\n  first_list.sort()\n  second_list.sort()\n  \n  distances = [None] * len(first_list)\n  \n  # we want the absolute distance\n  # it doesn't matter which list has the larger number\n  for i in range(len(first_list)):\n    distances[i] = abs(second_list[i] - first_list[i])\n  \n  return(sum(distances))\n\nRunaoc_source(day = 1, part = 1)\n\ninput = aoc_read(day = 1)\n\nresult = aoc_run(\"solve_day1_part1(input)\")\n\nElapsed: 0.005 seconds\nMemory:  377 KB\n\n\n— Python Day 1 Part 2 —\ndef solve_day1_part2(input):\n  \"\"\"\n  Score the similarities between 2 lists\n  \n  Parse the input text as 2 lists of numbers. Count the number of occurrences \n  of each item in the first list in the second list. Multiply each number by\n  its count to get the similarity score. Finally sum the score.\n\n  The list count method made this one fairly easy. Again I imagine there is a\n  slightly slicker way then using a for loop, but not bad to have the basics!\n  \n  Parameters\n  ----------\n  input : list of str\n      Where each string contains a number in the first list and a the second \n      list.\n\n  Returns\n  -------\n  int\n      The sum of absolute differences between the sorted lists\n  \"\"\"\n    \n  # extract to 2 lists of integers for ease of operations\n  lines = [line.split() for line in input]\n  first_list = [int(line[0]) for line in lines]\n  second_list = [int(line[1]) for line in lines]\n  \n  counts = [second_list.count(num) for num in first_list]\n  \n  similarity_scores = [None] * len(first_list)\n  \n  for i in range(len(first_list)):\n    similarity_scores[i] = first_list[i] * counts[i]\n  \n  return(sum(similarity_scores))\n\nRunaoc_source(day = 1, part = 2)\n\ninput = aoc_read(day = 1)\n\nresult = aoc_run(\"solve_day1_part2(input)\")\n\nElapsed: 0.011 seconds\nMemory:  357 KB"
  },
  {
    "objectID": "2024/2.html",
    "href": "2024/2.html",
    "title": "2024",
    "section": "",
    "text": "Day 1 Day 2\n\n\n\nR\nPython\n\n\n\n— R Day 2 Part 1 —\n#' Find how many reports are safe\n#'\n#' Check each report is\n#'   either all decreasing OR all increasing\n#'   AND all absolute differences are within 1 to 3\n#'\n#' @param input\n#' A character vector of strings containing space separated digits, where\n#' each string is a report and each digit is a 'level'\n#'\n#' @return\n#' numeric(1) The number of safe reports.\nsolve_day2_part1 &lt;- function(input) {\n  num_list &lt;- strsplit(input, \" \")\n  num_list &lt;- lapply(num_list, as.numeric)\n\n  diff_list &lt;- lapply(num_list, diff)\n\n  sum(vapply(diff_list, is_safe, logical(1)))\n}\n\n#' Check if the differences are safe\n#'\n#' Check the differences for\n#'   either all less than zero OR all greater than zero\n#'   AND all absolute differences are within 1 to 3\n#'\n#' @param diffs\n#' Numeric differences between levels in a report\n#'\n#' @return\n#' logical(1) whether the report differences are safe\nis_safe &lt;- function(diffs) {\n  one_direction &lt;- all(diffs &lt; 0) | all(diffs &gt; 0)\n  safe_size &lt;- all(abs(diffs) %in% c(1, 2, 3))\n\n  one_direction & safe_size\n}\n\nRunaoc_source(day = 2, part = 1)\n\ninput = aoc_read(day = 2)\n\naoc_run(solve_day2_part1(input))\n\nElapsed: 0.015 seconds\nMemory:  58 KB\n\n\n— R Day 2 Part 2 —\n#' Find how many reports are safe with dampeners\n#'\n#' Check each report is\n#'   either all decreasing OR all increasing\n#'   AND all absolute differences are within 1 to 3\n#'\n#' As well as whether the same can be achieved by removing one of the levels.\n#'\n#' I took what seems to be a long-winded approach of trying to identify which\n#' levels caused unsafe differences. Then I tried reports with those levels\n#' removed and tested if they were safe. My first attempt included checking for\n#' a majority direction of differences and replacing the differences in the\n#' minority, but I forgot to deal with no majority!\n#'\n#' I see from others that it would be simpler to just try removing each and\n#' every level, which is plenty feasible with the input.\n#'\n#' @param input\n#' A character vector, where each represents  a report, containing space\n#' delimited sequence of digits, 'levels'\n#'\n#' @return\n#' numeric(1) The number of safe reports.\nsolve_day2_part2 &lt;- function(input) {\n  num_list &lt;- strsplit(input, \" \")\n  num_list &lt;- lapply(num_list, as.numeric)\n\n  safe_list &lt;- vapply(num_list, is_safe, logical(1))\n\n  sum(safe_list)\n}\n\n#' Check if a report is safe\n#'\n#' Find the majority direction in differences (increasing/decreasing) if there\n#' is one. Mark the minority direction as unsafe diffs. Mark absolute diffs\n#' that aren't in 1, 2, 3 as unsafe. For each unsafe diff check if the report\n#' could be safe with new reports made by removing the levels either side of\n#' it.\n#'\n#' If there is no majority direction then the report is unsafe because the\n#' dampener won't be enough. (I suppose this assumes report length is not 3,\n#' which could be made safe)\n#'\n#' @param report\n#' Numeric levels to be checked\n#'\n#' @return\n#' logical(1) whether the report is safe\nis_safe &lt;- function(report, removed = 0) {\n  diffs &lt;- diff(report)\n  majority_diffs &lt;- length(diffs) / 2 + 1\n\n  # no majority direction\n  # fails all increasing OR all decreasing rule\n  # dampener won't be enough\n  if (max(sum(diffs &lt; 0), sum(diffs &gt; 0)) &lt; majority_diffs) {\n    return(FALSE)\n  }\n\n  # logical to store location of unsafe diffs\n  unsafe_diffs &lt;- logical(length(diffs))\n\n  # if majority decreasing, unsafe where increasing\n  if (sum(diffs &lt; 0) &gt;= 3) {\n    unsafe_diffs &lt;- diffs &gt; 0\n  }\n\n  # if majority increasing, unsafe where decreasing\n  if (sum(diffs &gt; 0) &gt;= 3) {\n    unsafe_diffs &lt;- unsafe_diffs | diffs &lt; 0\n  }\n\n  # unsafe where difference not in safe size range\n  unsafe_diffs &lt;- unsafe_diffs | !abs(diffs) %in% c(1, 2, 3)\n\n  if (!any(unsafe_diffs)) {\n    # no unsafe levels\n    TRUE\n  } else {\n    # create new reports by removing each level either side of the unsafe diffs\n    unsafe_levels &lt;- which(unsafe_diffs)\n    unsafe_levels &lt;- c(unsafe_levels, unsafe_levels + 1)\n    new_reports &lt;- lapply(unsafe_levels, \\(level) report[-level])\n\n    # check if the shortened report is safe without further option\n    # to remove levels\n    any(vapply(new_reports, is_safe_no_dampener, logical(1)))\n  }\n}\n\n#' Check if the rest of a report is safe\n#'\n#' Check the differences for\n#'   either all less than zero OR all greater than zero\n#'   AND all absolute differences are within 1 to 3\n#'\n#' @param report\n#' Numeric levels to be checked\n#'\n#' @return\n#' logical(1) whether the report is safe\nis_safe_no_dampener &lt;- function(report) {\n  diffs &lt;- diff(report)\n\n  one_direction &lt;- all(diffs &lt; 0) | all(diffs &gt; 0)\n  safe_size &lt;- all(abs(diffs) %in% c(1, 2, 3))\n\n  one_direction & safe_size\n}\n\nRunaoc_source(day = 2, part = 2)\n\ninput = aoc_read(day = 2)\n\naoc_run(solve_day2_part2(input))\n\nElapsed: 0.049 seconds\nMemory:  193 KB\n\n\n\n\n\n— Python Day 2 Part 1 —\nimport numpy as np\n\ndef solve_day2_part1(input):\n  \"\"\"\n  Find how many reports are safe\n  \n  Check each report is\n     either all decreasing OR all increasing\n     AND all absolute differences are within 1 to 3\n  \n  Parameters\n  ----------\n  input : list of str\n      Where each string is a report and each digit is a 'level'\n\n  Returns\n  -------\n  int\n    The number of safe reports\n  \n  \"\"\"\n  reports_list = [line.split() for line in input]\n  reports_list = [np.array(report, dtype = np.int32) for report in reports_list]\n    \n  diffs_list = [np.diff(report) for report in reports_list]\n  \n  return(sum([is_safe(diffs) for diffs in diffs_list]))\n  \ndef is_safe(diffs):\n  \"\"\"\n  Check if the differences are safe\n  \n  Check the differences for\n     either all decreasing OR all increasing\n     AND all absolute differences are within 1 to 3\n  \n  Parameters\n  ----------\n  diffs : numpy array of int\n      Where each int is a difference between consecutive levels in a report\n\n  Returns\n  -------\n  bool\n      Whether the differences are safe\n  \"\"\"\n  one_direction = all(diffs &lt; 0) or all(diffs &gt; 0)\n  safe_size = all(abs(diffs) &lt;= 3)\n  \n  return(one_direction and safe_size)\n\nRunaoc_source(day = 2, part = 1)\n\ninput = aoc_read(day = 2)\n\nresult = aoc_run(\"solve_day2_part1(input)\")\n\nElapsed: 0.037 seconds\nMemory:  610 KB\n\n\n— Python Day 2 Part 2 —\nimport numpy as np\n\ndef solve_day2_part2(input):\n  \"\"\"\n  Find how many reports are safe\n  \n  Check each report is\n     either all decreasing OR all increasing\n     AND all absolute differences are within 1 to 3\n  \n    Parameters\n  ----------\n  input : list of str\n      Where each string is a report and each digit is a 'level'\n\n  Returns\n  -------\n  int\n    The number of safe reports\n  \n  \"\"\"\n  reports_list = [line.split() for line in input]\n  reports_list = [np.array(report, dtype = np.int32) for report in reports_list]\n    \n  \n  return(sum([is_safe(report) for report in reports_list]))\n\ndef is_safe(report):\n  \"\"\"\n  Check if a report is safe with a dampener\n  \n  If a report is not ordinarily safe, try removing each single level to\n  then check if is safe.\n  \n  I opted for a simpler approach than my R version - just trying removing every\n  individual level in the report instead of checking which levels were unsafe. \n  Preferred to have this simpler logic as working with Python lists and numpy \n  arrays are new to me.\n  \n  Parameters\n  ----------\n  report : numpy array of int\n      Where each int is a level in the report\n\n  Returns\n  -------\n  bool\n      Whether the differences are safe\n  \"\"\"\n  if (is_safe_no_dampener(report)):\n    return(True)\n  \n  for i in range(len(report)):\n    new_report = np.delete(report, i)\n    \n    if (is_safe_no_dampener(new_report)):\n      return(True)\n    \n  return(False)\n    \n\ndef is_safe_no_dampener(report):\n  \"\"\"\n  Check if a report is safe\n  \n  Check the report is safe by finding the differences and confirming:\n     either all decreasing OR all increasing\n     AND all absolute differences are within 1 to 3\n  \n  Parameters\n  ----------\n  report : numpy array of int\n      Where each int is a level in the report\n\n  Returns\n  -------\n  bool\n      Whether the differences are safe\n  \"\"\"\n  diffs = np.diff(report)\n  \n  one_direction = all(diffs &lt; 0) or all(diffs &gt; 0)\n  safe_size = all(abs(diffs) &lt;= 3)\n  \n  return(one_direction and safe_size)\n\nRunaoc_source(day = 2, part = 2)\n\ninput = aoc_read(day = 2)\n\nresult = aoc_run(\"solve_day2_part2(input)\")\n\nElapsed: 0.352 seconds\nMemory:  610 KB"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R/Python Advent of Code Solutions",
    "section": "",
    "text": "A personal project of solutions to Advent of Code. I love these challenges as they give me a refreshing and stimulating way to get more comfortable coding, thinking about algorithms as well as just being being a fun set of puzzles.\nAs some kind of data analyst I am usually transforming and visualising data in Excel and R. I’m taking this as an opportunity to try out different kinds of operations and to pick up Python. I’d say it’s stepping out of my comfort zone, but perhaps by nature of my apparent obsession, I’m stepping into it.\n\nStar collection\n\n\n\nday\n2024\n\n\n\n\n1\nR ** Python **\n\n\n2\nR ** Python **\n\n\n3\n\n\n\n4\n\n\n\n5\n\n\n\n6\n\n\n\n7\n\n\n\n8\n\n\n\n9\n\n\n\n10\n\n\n\n11\n\n\n\n12\n\n\n\n13\n\n\n\n14\n\n\n\n15\n\n\n\n16\n\n\n\n17\n\n\n\n18\n\n\n\n19\n\n\n\n20\n\n\n\n21\n\n\n\n22\n\n\n\n23\n\n\n\n24\n\n\n\n25"
  }
]