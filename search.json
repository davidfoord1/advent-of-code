[
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "",
    "section": "",
    "text": "A personal project of solutions to Advent of Code. I love these challenges as they give me a refreshing and stimulating way to get more comfortable coding, thinking about algorithms as well as just being being a fun set of puzzles.\nAs some kind of data analyst I am usually transforming and visualising data in Excel and R. I’m taking this as an opportunity to try out different kinds of operations and to pick up Python. I’d say it’s stepping out of my comfort zone, but perhaps by nature of my apparent obsession, I’m stepping into it."
  },
  {
    "objectID": "2024/content.html",
    "href": "2024/content.html",
    "title": "2024",
    "section": "",
    "text": "Day 1\nDay 2\n\n\n\n\n\nR\nPython\n\n\n\n— R Day 1 Part 1 —\n#' Compare the differences between 2 lists\n#'\n#' A friendly opener! We parse the input text as 2 lists of numbers and sort\n#' them. Then we take the sum of the absolute differences between pairs.\n#'\n#' @param input\n#' A character vector with 2 numbers per string\n#'\n#' @return\n#' The sum of absolute differences between the sorted lists\nsolve_day1_part1 &lt;- function(input) {\n  # extract to 2 vectors for ease of operations\n  lists &lt;- strsplit(input, \" +\")\n  first_list &lt;- lapply(lists, \\(x) x[[1]])\n  second_list &lt;- lapply(lists, \\(x) x[[2]])\n\n  # sort so that we pair up the smallest number in the left list with the\n  # smallest number in the right list etc.\n  first_list &lt;- sort(as.numeric(first_list))\n  second_list &lt;- sort(as.numeric(second_list))\n\n  # we want the absolute distance\n  # it doesn't matter which list has the larger number\n  distances &lt;- abs(second_list - first_list)\n\n  sum(distances)\n}\n\nRunaoc_source(day = 1, part = 1)\n\ninput = aoc_read(day = 1)\n\naoc_run(solve_day1_part1(input))\n\nElapsed: 0.008 seconds\nMemory:  71 KB\n\n\n— R Day 1 Part 2 —\n#' Score the similarities between 2 lists\n#'\n#' Parse the input text as 2 lists of numbers. Count the number of occurrences\n#' of each item in the first list in the second list. Multiply each number by\n#' its count to get the similarity score. Finally sum the score.\n#'\n#' To count I used the sum of equality between each number in the second\n#' list and the number being counted from the first list.\n#'\n#' @param input\n#' A character vector with 2 numbers per string\n#'\n#' @return\n#' The sum of absolute differences between the sorted lists\nsolve_day1_part2 &lt;- function(input) {\n  # extract to 2 vectors for ease of operations\n  lists &lt;- strsplit(input, \" +\")\n  first_list &lt;- lapply(lists, \\(x) x[[1]])\n  second_list &lt;- lapply(lists, \\(x) x[[2]])\n\n  first_list &lt;- as.numeric(first_list)\n  second_list &lt;- as.numeric(second_list)\n\n  # This time we need to count how many times a number in the first list\n  # occurs in the second list. We can do that as the sum of logical equality\n  # between each number in the second list and the number being counted from\n  # the first list.\n  counts &lt;- vapply(first_list, \\(num) sum(second_list == num), numeric(1))\n\n  similarity_scores &lt;- first_list * counts\n\n  sum(similarity_scores)\n}\n\nRunaoc_source(day = 1, part = 2)\n\ninput = aoc_read(day = 1)\n\naoc_run(solve_day1_part2(input))\n\nElapsed: 0.007 seconds\nMemory:  4067 KB\n\n\n\n\n\n— Python Day 1 Part 1 —\ndef solve_day1_part1(input):\n  \"\"\"\n  Compare the differences between 2 lists\n  \n  Parse the input text as 2 lists of numbers and sort \n  them. Then take the sum of the absolute differences between pairs.\n  \n  I imagine it's not too 'pythonic' even for such a simple puzzle. In porting\n  my R solution with the limited Python that I know, lapply has become list \n  comprehensions and I've used a for loop to iterate over the 2 lists instead\n  of a vectorised comparison. Perhaps NumPy could help out there?\n\n  Parameters\n  ----------\n  input : list of str\n      Where each string contains a number in the first list and a the second \n      list.\n\n  Returns\n  -------\n  int\n      The sum of absolute differences between the sorted lists\n  \"\"\"\n    \n  # extract to 2 lists of integers for ease of operations\n  lines = [line.split() for line in input]\n  first_list = [int(line[0]) for line in lines]\n  second_list = [int(line[1]) for line in lines]\n  \n  # sort so that we pair up the smallest number in the left list with the\n  # smallest number in the right list etc.\n  first_list.sort()\n  second_list.sort()\n  \n  distances = [None] * len(first_list)\n  \n  # we want the absolute distance\n  # it doesn't matter which list has the larger number\n  for i in range(len(first_list)):\n    distances[i] = abs(second_list[i] - first_list[i])\n  \n  return(sum(distances))\n  \n  \n\nRunaoc_source(day = 1, part = 1)\n\ninput = aoc_read(day = 1)\n\nresult = aoc_run(\"solve_day1_part1(input)\")\n\nElapsed: 0.016 seconds\nMemory:  378 KB\n\n\n— Python Day 1 Part 2 —\ndef solve_day1_part2(input):\n  \"\"\"\n  Score the similarities between 2 lists\n  \n  Parse the input text as 2 lists of numbers. Count the number of occurrences \n  of each item in the first list in the second list. Multiply each number by\n  its count to get the similarity score. Finally sum the score.\n\n  The list count method made this one fairly easy. Again I imagine there is a\n  slightly slicker way then using a for loop, but not bad to have the basics!\n  \n  Parameters\n  ----------\n  input : list of str\n      Where each string contains a number in the first list and a the second \n      list.\n\n  Returns\n  -------\n  int\n      The sum of absolute differences between the sorted lists\n  \"\"\"\n    \n  # extract to 2 lists of integers for ease of operations\n  lines = [line.split() for line in input]\n  first_list = [int(line[0]) for line in lines]\n  second_list = [int(line[1]) for line in lines]\n  \n  counts = [second_list.count(num) for num in first_list]\n  \n  similarity_scores = [None] * len(first_list)\n  \n  for i in range(len(first_list)):\n    similarity_scores[i] = first_list[i] * counts[i]\n  \n  return(sum(similarity_scores))\n\nRunaoc_source(day = 1, part = 2)\n\ninput = aoc_read(day = 1)\n\nresult = aoc_run(\"solve_day1_part2(input)\")\n\nElapsed: 0.011 seconds\nMemory:  357 KB\n\n\n\n\n\n\n\n\n\nR\n\n\n— R Day 2 Part 1 —\n#' Title\n#'\n#' @param x What if talk about this parameter really long, how does this look in\n#' the code chunk?\n#'\n#' @return\n#' @export\n#'\n#' @examples\nsolve_day2_part1 &lt;- function(x) {\n  \"blah\"\n}\n\nRunaoc_source(day = 2, part = 1)\n\ninput = aoc_read(day = 2)\n\naoc_run(solve_day2_part1(input))\n\nElapsed: &lt; 0.001 seconds\nMemory:  &lt; 1 KB"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R/Python Advent of Code Solutions",
    "section": "",
    "text": "A personal project of solutions to Advent of Code. I love these challenges as they give me a refreshing and stimulating way to get more comfortable coding, thinking about algorithms as well as just being being a fun set of puzzles.\nAs some kind of data analyst I am usually transforming and visualising data in Excel and R. I’m taking this as an opportunity to try out different kinds of operations and to pick up Python. I’d say it’s stepping out of my comfort zone, but perhaps by nature of my apparent obsession, I’m stepping into it.\n\nStar collection\n\n\n\n\n\n\n\nday\n2024\n\n\n\n\n1\nR ** Python **\n\n\n2\nR *\n\n\n3\n\n\n\n4\n\n\n\n5\n\n\n\n6\n\n\n\n7\n\n\n\n8\n\n\n\n9\n\n\n\n10\n\n\n\n11\n\n\n\n12\n\n\n\n13\n\n\n\n14\n\n\n\n15\n\n\n\n16\n\n\n\n17\n\n\n\n18\n\n\n\n19\n\n\n\n20\n\n\n\n21\n\n\n\n22\n\n\n\n23\n\n\n\n24\n\n\n\n25"
  }
]